{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const postsThunk = createAsyncThunk(\"allPosts\", async (payload, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  if (payload.type === \"remove\") {\n    const response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${payload.id}`);\n    const data = response.data;\n    return data;\n  }\n\n  if (payload.type === \"view\") {\n    console.log(\"find payy\", payload);\n    const response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${payload}`);\n    const data = response.data;\n    return data;\n  } else {\n    const response = await axios.get('https://jsonplaceholder.typicode.com/posts');\n    const data = response.data;\n    return data;\n  }\n});\nexport const postSlice = createSlice({\n  name: \"userThunk\",\n  initialState: {\n    data: [],\n    selectedItem: {},\n    status: \"\"\n  },\n  reducers: {\n    removePost: (state, action) => {\n      state.data = action.payload;\n    },\n    showView: (state, action) => {\n      state.selectedItem = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(postsThunk.pending, (state, action) => {\n      state.status = \"pending\";\n    });\n    builder.addCase(postsThunk.fulfilled, (state, action) => {\n      state.data = action.payload.slice(0, 10);\n      state.status = \"fulfilled\";\n    });\n    builder.addCase(postsThunk.rejected, (state, action) => {\n      state.status = \"rejected\";\n      state.data = action.error;\n    });\n  }\n});\nexport const {\n  removePost,\n  showView\n} = postSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","axios","postsThunk","payload","rejectWithValue","type","response","get","id","data","console","log","postSlice","name","initialState","selectedItem","status","reducers","removePost","state","action","showView","extraReducers","builder","addCase","pending","fulfilled","slice","rejected","error","actions"],"sources":["C:/Users/Mohammad_Hussain/Desktop/samrin-react-prac/my-first-app/src/HomeWorkThunk/slicePosts/slicePosts.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nexport const postsThunk = createAsyncThunk(\"allPosts\", async (payload, { rejectWithValue }) => {\r\n    \r\n    if (payload.type === \"remove\") {\r\n        const response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${payload.id}`)\r\n        const data = response.data\r\n        return data\r\n    }\r\n\r\n    if (payload.type === \"view\") {\r\n        console.log(\"find payy\", payload);\r\n        const response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${payload}`)\r\n        const data = response.data\r\n        return data\r\n    } \r\n\r\n    else {\r\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        const data = response.data\r\n        return data\r\n    }\r\n})\r\n\r\nexport const postSlice = createSlice({\r\n    name: \"userThunk\",\r\n    initialState: {\r\n        data: [],\r\n        selectedItem: {},\r\n        status: \"\"\r\n    },\r\n    reducers: {\r\n        removePost: (state, action) => {\r\n            state.data = action.payload\r\n        },\r\n        showView: (state, action) => {\r\n            state.selectedItem = action.payload\r\n        }\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n\r\n        builder.addCase(postsThunk.pending, (state, action) => {\r\n            state.status = \"pending\"\r\n        })\r\n\r\n        builder.addCase(postsThunk.fulfilled, (state, action) => {\r\n            state.data = action.payload.slice(0, 10)\r\n            state.status = \"fulfilled\"\r\n        })\r\n\r\n        builder.addCase(postsThunk.rejected, (state, action) => {\r\n            state.status = \"rejected\"\r\n            state.data = action.error\r\n        })\r\n    }\r\n})\r\n\r\nexport const { removePost, showView } = postSlice.actions\r\n"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,UAAU,GAAGH,gBAAgB,CAAC,UAAD,EAAa,OAAOI,OAAP,WAAwC;EAAA,IAAxB;IAAEC;EAAF,CAAwB;;EAE3F,IAAID,OAAO,CAACE,IAAR,KAAiB,QAArB,EAA+B;IAC3B,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAW,8CAA6CJ,OAAO,CAACK,EAAG,EAAnE,CAAvB;IACA,MAAMC,IAAI,GAAGH,QAAQ,CAACG,IAAtB;IACA,OAAOA,IAAP;EACH;;EAED,IAAIN,OAAO,CAACE,IAAR,KAAiB,MAArB,EAA6B;IACzBK,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBR,OAAzB;IACA,MAAMG,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAW,8CAA6CJ,OAAQ,EAAhE,CAAvB;IACA,MAAMM,IAAI,GAAGH,QAAQ,CAACG,IAAtB;IACA,OAAOA,IAAP;EACH,CALD,MAOK;IACD,MAAMH,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,4CAAV,CAAvB;IACA,MAAME,IAAI,GAAGH,QAAQ,CAACG,IAAtB;IACA,OAAOA,IAAP;EACH;AACJ,CApByC,CAAnC;AAsBP,OAAO,MAAMG,SAAS,GAAGZ,WAAW,CAAC;EACjCa,IAAI,EAAE,WAD2B;EAEjCC,YAAY,EAAE;IACVL,IAAI,EAAE,EADI;IAEVM,YAAY,EAAE,EAFJ;IAGVC,MAAM,EAAE;EAHE,CAFmB;EAOjCC,QAAQ,EAAE;IACNC,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC3BD,KAAK,CAACV,IAAN,GAAaW,MAAM,CAACjB,OAApB;IACH,CAHK;IAINkB,QAAQ,EAAE,CAACF,KAAD,EAAQC,MAAR,KAAmB;MACzBD,KAAK,CAACJ,YAAN,GAAqBK,MAAM,CAACjB,OAA5B;IACH;EANK,CAPuB;EAgBjCmB,aAAa,EAAGC,OAAD,IAAa;IAExBA,OAAO,CAACC,OAAR,CAAgBtB,UAAU,CAACuB,OAA3B,EAAoC,CAACN,KAAD,EAAQC,MAAR,KAAmB;MACnDD,KAAK,CAACH,MAAN,GAAe,SAAf;IACH,CAFD;IAIAO,OAAO,CAACC,OAAR,CAAgBtB,UAAU,CAACwB,SAA3B,EAAsC,CAACP,KAAD,EAAQC,MAAR,KAAmB;MACrDD,KAAK,CAACV,IAAN,GAAaW,MAAM,CAACjB,OAAP,CAAewB,KAAf,CAAqB,CAArB,EAAwB,EAAxB,CAAb;MACAR,KAAK,CAACH,MAAN,GAAe,WAAf;IACH,CAHD;IAKAO,OAAO,CAACC,OAAR,CAAgBtB,UAAU,CAAC0B,QAA3B,EAAqC,CAACT,KAAD,EAAQC,MAAR,KAAmB;MACpDD,KAAK,CAACH,MAAN,GAAe,UAAf;MACAG,KAAK,CAACV,IAAN,GAAaW,MAAM,CAACS,KAApB;IACH,CAHD;EAIH;AA/BgC,CAAD,CAA7B;AAkCP,OAAO,MAAM;EAAEX,UAAF;EAAcG;AAAd,IAA2BT,SAAS,CAACkB,OAA3C"},"metadata":{},"sourceType":"module"}